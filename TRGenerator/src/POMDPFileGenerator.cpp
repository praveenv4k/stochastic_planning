#include "POMDPFileGenerator.h"
#include <stdexcept>
#include <iostream>
#include <fstream>
#include "Utils.h"

void POMDPFileGenerator::writeBody(std::ofstream& fs){
  fs << "discount: 0.95" << std::endl;
  fs << "values: reward" << std::endl;
  fs << "states: " << m_stateMap.size() << std::endl;
  fs << "actions: " << m_actionMap.size() << std::endl;
  fs << "observations: 1" << std::endl << std::endl;  
  fs << "start: uniform" << std::endl << std::endl;
  
  // Writing Transition Table
  fs << "### TRANSITION TABLE ###" <<std::endl;
  for(TransitionMap::iterator it=m_transitionMap.begin();it!=m_transitionMap.end();it++){
     StateActionTuple sa= it->first;
     if(it->second.size()>0){
	/*#state0
	T: n : 0 : 0 1
	T: w : 0 : 0 1
	T: e : 0 : 1 1
	T: s : 0 : 4 1*/ 
	fs << "T: " << sa.get<1>() << " : " << sa.get<0>() << " : " << it->second[0] << " " << 1 << std::endl;
     }
  }
  
  // Writing Observation Table
  fs << "### OBSERVATION TABLE ###" <<std::endl;
  for(size_t i=0;i<m_actionMap.size();i++){
    fs << "O: " << i << std::endl << "uniform" << std::endl << std::endl;
  }
  
  // Writing Reward Table
  fs << "### REWARD TABLE ###" <<std::endl;
  for(RewardMap::iterator it=m_rewardMap.begin();it!=m_rewardMap.end();it++){
     int state= it->first;
     fs << "R: * :" << state << " : * " << it->second << std::endl;
  }
}

void POMDPFileGenerator::writeHeader(std::ofstream& fs){
   // Writing fileheader
  std::time_t result = std::time(NULL);
  fs << "################################################################" << std::endl;
  fs << "#### GENERATED ON : " << std::asctime(std::localtime(&result));
  fs << "#### GENERATED BY : " << getName() << std::endl;
}
void POMDPFileGenerator::writeFooter(std::ofstream& fs){
}
